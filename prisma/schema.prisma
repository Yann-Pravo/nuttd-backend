// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  refreshToken  String[]
  rememberMe    Boolean   @default(false)
  email         String?   @unique
  password      String?
  followers     User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")
  guilds        Guild[]
  nuts          Nut[]
  role          Role      @default(USER)
  profile       Profile?
  thirdParty    ThirdParty?
  ip            String?
  location      Location? @relation(fields: [locationId], references: [id])
  locationId    String?
}

model ThirdParty {
  platformId    String    @unique
  provider      String
  accessToken   String?
  refreshToken  String?
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
}

model Profile {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  avatar      String?
  displayName String?
  birthday    DateTime?
  gender      Gender?
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

model Nut {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  date        DateTime
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  String?
  solo        Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Location {
  id          String    @id @default(cuid())
  citycountry String    @unique
  city        String?
  country     String
  countryFlag String?
  countryCode String
  region      String?
  regionName  String?
  zip         String?
  nuts        Nut[]
  users       User[]
}

model Guild {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  users     User[]
}

